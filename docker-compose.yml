services:
  # PostgreSQL Database
  workspace_db:
    image: postgres:15
    container_name: workspace_db
    user: "0:0"
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - workspace_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # FastAPI Application
  workspace_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: workspace_app
    ports:
      - "9000:9000"
    depends_on:
      workspace_db:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app_network
    restart: unless-stopped
  
  certbot-init:
    image: certbot/certbot
    container_name: certbot_init
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - DOMAIN=${DOMAIN}
    entrypoint: ["/bin/sh"]
    command: ["-c", "if [ ! -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then echo 'Generating SSL certificate...'; certbot certonly --webroot --webroot-path=/var/www/certbot --email $${CERTBOT_EMAIL} --agree-tos --no-eff-email -d $${DOMAIN} -d www.$${DOMAIN}; else echo 'SSL certificate already exists, skipping...'; fi"]
    networks:
      - app_network
  
  nginx-http-config:
    image: alpine
    volumes:
      - ./:/app
    working_dir: /app
    command: sh -c "apk add --no-cache bash gettext && bash nginx/bash/http.sh"

  nginx-https-config:
    image: alpine
    volumes:
      - ./:/app
    working_dir: /app
    command: sh -c "apk add --no-cache bash gettext && bash nginx/bash/https.sh"

  nginx:
    image: nginx:latest
    container_name: workspace_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - workspace_app
      #- certbot-init
    networks:
      - app_network
    restart: unless-stopped

  #certbot:
  #  image: certbot/certbot
  #  container_name: workspace_certbot
  #  volumes:
  #    - ./nginx/certbot/conf:/etc/letsencrypt
  #    - ./nginx/certbot/www:/var/www/certbot
  #  entrypoint: >
  #    sh -c "trap exit TERM; while :; do
  #      certbot renew --webroot -w /var/www/certbot --post-hook 'docker exec workspace_nginx nginx -s reload';
  #      sleep 12h & wait $${!};
  #    done"
  #  networks:
  #    - app_network
  #  restart: unless-stopped

volumes:
  workspace_db_data:

networks:
  app_network:
    driver: bridge